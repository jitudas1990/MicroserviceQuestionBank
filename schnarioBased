Q.If you had to scale a Spring Boot application to handle high traffic, what strategies would you use?
Q.Imagine Your application requires data from an external REST API to function. Describe how you would use RestTemplate or WebClient to consume the REST API in your Spring Boot application.
Q. Your Spring Boot backend needs to accept cross-origin requests from a specific frontend domain. Explain how you would configure CORS policies in your application.
Q. Your Spring Boot application is experiencing performance issues under high load. What are the steps you would take to identify and address the performance?
Q. Imagine you need to make a simple web application with Spring Boot that serves a static homepage and a dynamic page displaying current server time. Discuss the project structure you would use.
Q.Your application behaves differently in development and production environments. How would you use Spring profiles to manage these differences?
Q.What strategies would you use to optimize the performance of a Spring Boot application?
Q.Describe a scenario where a Spring Boot application needs to dynamically switch between multiple data sources at runtime based on the request context.
Q.Discuss how you would add a GraphQLAPI to an existing Spring Boot RESTful service.
Q.Describe how you would secure sensitive data in a Spring Boot application that is accessed by multiple users with different roles.
Q.In an IoT application scenario, explain how a Spring Boot backend could be designed to efficiently process and analyze real-time data streams from thousands of IoT devices.
Q.Discuss the specific security challenges associated with using WebSocketsin a Spring Boot application.
Q.How would you implement efficient handling of large file uploads in a Spring Boot REST API, ensuring that the system remains responsive and scalable?
Q.How you would use Spring WebFluxto consume data from an external service in a non-blocking manner and process this data reactively within your Spring Boot application.
Q. Imagine you need to develop a REST API in a Spring Boot application that allows clients to manage user data. Explain how you would structure your application.
Q.Imagine you are designing a Spring Boot application that interfaces with multiple external APIs. How would you handle API rate limits and failures?
Q.You need to deploy a Spring Boot application to a cloud platform (e.g., AWS, Azure). What steps would you take, and how would you configure the application properties for different environments.
Q.Explain how you would use application events in Spring Boot to notify different parts of your application about significant activities.
Q.What happens if we use both the @Autowired annotation and the new operator to create a bean of the same type(same class) in a Spring Boot application?
Ans - If you use both the @Autowired annotation and the new operator to create a bean of the same type, then you will end up with two different instances of the bean.
When you use @Autowired, Spring Boot automatically creates and injects an instance of the specified bean into your class, while when you use the new operator, you are creating a new instance of the bean yourself. If you create a new instance of a bean using the new operator, Spring Boot will not manage the bean, which means that it will not be included in any of the dependency injection or autowiring processes that Spring Boot provides.
Q. What happens if both application.properties and application.yml files exist in the classpath? What about bootstrap.properties and bootstrap.yml files?
Ans - If both application.properties and application.yml files exist in the classpath, then the application.yml file will take precedence over the application.properties file. This is because Spring Boot considers YAML files to be more readable and easier to manage than properties files.
Similarly, if both bootstrap.properties and bootstrap.yml files exist in the classpath, then the bootstrap.yml file will take precedence over the bootstrap.properties file. The bootstrap files are loaded before the application files, and they are used to configure external resources and initialize the application context. This means that if you have configuration settings that need to be loaded before the application context is initialized, then you should use bootstrap files.
