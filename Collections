1. What is the Java Collections Framework?


2. Whatâ€™s the difference between List, Set, and Map?


3. ArrayList vs LinkedList â€“ when to use what?


4. HashMap vs Hashtable vs ConcurrentHashMap


5. How does HashMap work internally?


6. HashSet vs TreeSet â€“ key differences


7. TreeMap vs HashMap â€“ ordering & performance


8. Fail-fast vs Fail-safe iterators


9. Iterator vs ListIterator â€“ differences and use cases


10. Comparable vs Comparator


11. Ways to sort a List using Comparator/Lambda


12. What is EnumMap and when should you use it?


13. What is WeakHashMap and its use case?


14. Synchronized vs Concurrent collections


15. Difference between Collection and Collections class


ðŸ”¹ Java 8 Features

âœ¨ Lambda & Functional Interfaces
16. What is a Lambda Expression?
17. What is a Functional Interface?
18. Examples of built-in functional interfaces (e.g., Predicate, Function, Consumer)
19. Purpose of @FunctionalInterface annotation
20. Lambda vs Anonymous class


âœ¨ Stream API

21. What is Stream API and its advantages?
22. Stream vs Collection
23. Intermediate vs Terminal operations
24. Common methods: filter(), map(), reduce(), collect(), sorted()
25. map() vs flatMap()


âœ¨ Optional Class

26. What is Optional and how does it prevent NullPointerException?
27. Key methods: of(), ofNullable(), isPresent(), ifPresent(), orElse(), orElseGet(), orElseThrow()
28. Difference between orElse() and orElseGet()

âœ¨ Method & Constructor References
29. What are Method References?
30. Types of Method References
31. Constructor reference using ClassName::new

âœ¨ Date and Time API
32. New date/time classes: LocalDate, LocalDateTime, ZonedDateTime, Period, Duration
33. Differences between old java.util.Date and new java.time API
